// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/13/2019 18:05:46"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          NZP_Logic
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module NZP_Logic_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Bus_In;
reg Clock;
reg Load_NZP_Logic;
reg Reset;
// wires                                               
wire N;
wire P;
wire Z;

// assign statements (if any)                          
NZP_Logic i1 (
// port map - connection between master ports and signals/registers   
	.Bus_In(Bus_In),
	.Clock(Clock),
	.Load_NZP_Logic(Load_NZP_Logic),
	.N(N),
	.P(P),
	.Reset(Reset),
	.Z(Z)
);
initial 
begin 
#1000000 $finish;
end 
// Bus_In[ 15 ]
initial
begin
	Bus_In[15] = 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #60000 1'b0;
	Bus_In[15] = #60000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #60000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #120000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #90000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #120000 1'b1;
	Bus_In[15] = #30000 1'b0;
	Bus_In[15] = #30000 1'b1;
	Bus_In[15] = #30000 1'b0;
end 
// Bus_In[ 14 ]
initial
begin
	Bus_In[14] = 1'b0;
	Bus_In[14] = #30000 1'b1;
	Bus_In[14] = #30000 1'b0;
	Bus_In[14] = #30000 1'b1;
	Bus_In[14] = #30000 1'b0;
	Bus_In[14] = #60000 1'b1;
	Bus_In[14] = #60000 1'b0;
	Bus_In[14] = #30000 1'b1;
	Bus_In[14] = #90000 1'b0;
	Bus_In[14] = #60000 1'b1;
	Bus_In[14] = #60000 1'b0;
	Bus_In[14] = #60000 1'b1;
	Bus_In[14] = #30000 1'b0;
	Bus_In[14] = #30000 1'b1;
	Bus_In[14] = #30000 1'b0;
	Bus_In[14] = #30000 1'b1;
	Bus_In[14] = #60000 1'b0;
	Bus_In[14] = #60000 1'b1;
	Bus_In[14] = #30000 1'b0;
	Bus_In[14] = #60000 1'b1;
	Bus_In[14] = #30000 1'b0;
	Bus_In[14] = #60000 1'b1;
end 
// Bus_In[ 13 ]
initial
begin
	Bus_In[13] = 1'b0;
	Bus_In[13] = #30000 1'b1;
	Bus_In[13] = #90000 1'b0;
	Bus_In[13] = #60000 1'b1;
	Bus_In[13] = #30000 1'b0;
	Bus_In[13] = #150000 1'b1;
	Bus_In[13] = #30000 1'b0;
	Bus_In[13] = #90000 1'b1;
	Bus_In[13] = #30000 1'b0;
	Bus_In[13] = #90000 1'b1;
	Bus_In[13] = #60000 1'b0;
	Bus_In[13] = #60000 1'b1;
	Bus_In[13] = #30000 1'b0;
	Bus_In[13] = #60000 1'b1;
	Bus_In[13] = #60000 1'b0;
	Bus_In[13] = #120000 1'b1;
end 
// Bus_In[ 12 ]
initial
begin
	Bus_In[12] = 1'b1;
	Bus_In[12] = #60000 1'b0;
	Bus_In[12] = #30000 1'b1;
	Bus_In[12] = #60000 1'b0;
	Bus_In[12] = #60000 1'b1;
	Bus_In[12] = #30000 1'b0;
	Bus_In[12] = #90000 1'b1;
	Bus_In[12] = #90000 1'b0;
	Bus_In[12] = #30000 1'b1;
	Bus_In[12] = #30000 1'b0;
	Bus_In[12] = #120000 1'b1;
	Bus_In[12] = #30000 1'b0;
	Bus_In[12] = #60000 1'b1;
	Bus_In[12] = #30000 1'b0;
	Bus_In[12] = #60000 1'b1;
	Bus_In[12] = #30000 1'b0;
	Bus_In[12] = #60000 1'b1;
	Bus_In[12] = #60000 1'b0;
	Bus_In[12] = #30000 1'b1;
end 
// Bus_In[ 11 ]
initial
begin
	Bus_In[11] = 1'b0;
	Bus_In[11] = #90000 1'b1;
	Bus_In[11] = #90000 1'b0;
	Bus_In[11] = #30000 1'b1;
	Bus_In[11] = #30000 1'b0;
	Bus_In[11] = #30000 1'b1;
	Bus_In[11] = #150000 1'b0;
	Bus_In[11] = #180000 1'b1;
	Bus_In[11] = #30000 1'b0;
	Bus_In[11] = #30000 1'b1;
	Bus_In[11] = #30000 1'b0;
	Bus_In[11] = #30000 1'b1;
	Bus_In[11] = #30000 1'b0;
	Bus_In[11] = #30000 1'b1;
	Bus_In[11] = #120000 1'b0;
	Bus_In[11] = #30000 1'b1;
	Bus_In[11] = #30000 1'b0;
	Bus_In[11] = #30000 1'b1;
end 
// Bus_In[ 10 ]
initial
begin
	Bus_In[10] = 1'b1;
	Bus_In[10] = #30000 1'b0;
	Bus_In[10] = #90000 1'b1;
	Bus_In[10] = #30000 1'b0;
	Bus_In[10] = #30000 1'b1;
	Bus_In[10] = #60000 1'b0;
	Bus_In[10] = #30000 1'b1;
	Bus_In[10] = #60000 1'b0;
	Bus_In[10] = #90000 1'b1;
	Bus_In[10] = #30000 1'b0;
	Bus_In[10] = #30000 1'b1;
	Bus_In[10] = #90000 1'b0;
	Bus_In[10] = #60000 1'b1;
	Bus_In[10] = #90000 1'b0;
	Bus_In[10] = #60000 1'b1;
	Bus_In[10] = #90000 1'b0;
	Bus_In[10] = #30000 1'b1;
	Bus_In[10] = #90000 1'b0;
end 
// Bus_In[ 9 ]
initial
begin
	Bus_In[9] = 1'b1;
	Bus_In[9] = #30000 1'b0;
	Bus_In[9] = #30000 1'b1;
	Bus_In[9] = #30000 1'b0;
	Bus_In[9] = #60000 1'b1;
	Bus_In[9] = #60000 1'b0;
	Bus_In[9] = #60000 1'b1;
	Bus_In[9] = #90000 1'b0;
	Bus_In[9] = #60000 1'b1;
	Bus_In[9] = #30000 1'b0;
	Bus_In[9] = #120000 1'b1;
	Bus_In[9] = #30000 1'b0;
	Bus_In[9] = #30000 1'b1;
	Bus_In[9] = #90000 1'b0;
	Bus_In[9] = #30000 1'b1;
	Bus_In[9] = #120000 1'b0;
	Bus_In[9] = #30000 1'b1;
	Bus_In[9] = #90000 1'b0;
end 
// Bus_In[ 8 ]
initial
begin
	Bus_In[8] = 1'b1;
	Bus_In[8] = #150000 1'b0;
	Bus_In[8] = #60000 1'b1;
	Bus_In[8] = #30000 1'b0;
	Bus_In[8] = #60000 1'b1;
	Bus_In[8] = #30000 1'b0;
	Bus_In[8] = #90000 1'b1;
	Bus_In[8] = #30000 1'b0;
	Bus_In[8] = #30000 1'b1;
	Bus_In[8] = #30000 1'b0;
	Bus_In[8] = #90000 1'b1;
	Bus_In[8] = #90000 1'b0;
	Bus_In[8] = #30000 1'b1;
	Bus_In[8] = #30000 1'b0;
	Bus_In[8] = #240000 1'b1;
end 
// Bus_In[ 7 ]
initial
begin
	Bus_In[7] = 1'b0;
	Bus_In[7] = #30000 1'b1;
	Bus_In[7] = #30000 1'b0;
	Bus_In[7] = #60000 1'b1;
	Bus_In[7] = #240000 1'b0;
	Bus_In[7] = #90000 1'b1;
	Bus_In[7] = #60000 1'b0;
	Bus_In[7] = #30000 1'b1;
	Bus_In[7] = #30000 1'b0;
	Bus_In[7] = #30000 1'b1;
	Bus_In[7] = #60000 1'b0;
	Bus_In[7] = #30000 1'b1;
	Bus_In[7] = #30000 1'b0;
	Bus_In[7] = #60000 1'b1;
	Bus_In[7] = #90000 1'b0;
	Bus_In[7] = #30000 1'b1;
	Bus_In[7] = #30000 1'b0;
	Bus_In[7] = #30000 1'b1;
end 
// Bus_In[ 6 ]
initial
begin
	Bus_In[6] = 1'b0;
	Bus_In[6] = #60000 1'b1;
	Bus_In[6] = #30000 1'b0;
	Bus_In[6] = #60000 1'b1;
	Bus_In[6] = #90000 1'b0;
	Bus_In[6] = #60000 1'b1;
	Bus_In[6] = #30000 1'b0;
	Bus_In[6] = #60000 1'b1;
	Bus_In[6] = #60000 1'b0;
	Bus_In[6] = #60000 1'b1;
	Bus_In[6] = #30000 1'b0;
	Bus_In[6] = #30000 1'b1;
	Bus_In[6] = #30000 1'b0;
	Bus_In[6] = #30000 1'b1;
	Bus_In[6] = #60000 1'b0;
	Bus_In[6] = #30000 1'b1;
	Bus_In[6] = #60000 1'b0;
	Bus_In[6] = #30000 1'b1;
	Bus_In[6] = #60000 1'b0;
	Bus_In[6] = #60000 1'b1;
	Bus_In[6] = #30000 1'b0;
	Bus_In[6] = #30000 1'b1;
end 
// Bus_In[ 5 ]
initial
begin
	Bus_In[5] = 1'b1;
	Bus_In[5] = #120000 1'b0;
	Bus_In[5] = #90000 1'b1;
	Bus_In[5] = #30000 1'b0;
	Bus_In[5] = #30000 1'b1;
	Bus_In[5] = #30000 1'b0;
	Bus_In[5] = #90000 1'b1;
	Bus_In[5] = #150000 1'b0;
	Bus_In[5] = #30000 1'b1;
	Bus_In[5] = #60000 1'b0;
	Bus_In[5] = #30000 1'b1;
	Bus_In[5] = #90000 1'b0;
	Bus_In[5] = #60000 1'b1;
	Bus_In[5] = #90000 1'b0;
	Bus_In[5] = #60000 1'b1;
end 
// Bus_In[ 4 ]
initial
begin
	Bus_In[4] = 1'b0;
	Bus_In[4] = #30000 1'b1;
	Bus_In[4] = #60000 1'b0;
	Bus_In[4] = #60000 1'b1;
	Bus_In[4] = #60000 1'b0;
	Bus_In[4] = #30000 1'b1;
	Bus_In[4] = #30000 1'b0;
	Bus_In[4] = #60000 1'b1;
	Bus_In[4] = #60000 1'b0;
	Bus_In[4] = #60000 1'b1;
	Bus_In[4] = #60000 1'b0;
	Bus_In[4] = #60000 1'b1;
	Bus_In[4] = #90000 1'b0;
	Bus_In[4] = #60000 1'b1;
	Bus_In[4] = #60000 1'b0;
	Bus_In[4] = #30000 1'b1;
	Bus_In[4] = #150000 1'b0;
end 
// Bus_In[ 3 ]
initial
begin
	Bus_In[3] = 1'b0;
	Bus_In[3] = #60000 1'b1;
	Bus_In[3] = #60000 1'b0;
	Bus_In[3] = #30000 1'b1;
	Bus_In[3] = #30000 1'b0;
	Bus_In[3] = #30000 1'b1;
	Bus_In[3] = #60000 1'b0;
	Bus_In[3] = #30000 1'b1;
	Bus_In[3] = #120000 1'b0;
	Bus_In[3] = #90000 1'b1;
	Bus_In[3] = #30000 1'b0;
	Bus_In[3] = #60000 1'b1;
	Bus_In[3] = #90000 1'b0;
	Bus_In[3] = #60000 1'b1;
	Bus_In[3] = #30000 1'b0;
	Bus_In[3] = #30000 1'b1;
	Bus_In[3] = #60000 1'b0;
	Bus_In[3] = #60000 1'b1;
	Bus_In[3] = #30000 1'b0;
	Bus_In[3] = #30000 1'b1;
end 
// Bus_In[ 2 ]
initial
begin
	Bus_In[2] = 1'b0;
	Bus_In[2] = #30000 1'b1;
	Bus_In[2] = #60000 1'b0;
	Bus_In[2] = #150000 1'b1;
	Bus_In[2] = #30000 1'b0;
	Bus_In[2] = #120000 1'b1;
	Bus_In[2] = #120000 1'b0;
	Bus_In[2] = #30000 1'b1;
	Bus_In[2] = #90000 1'b0;
	Bus_In[2] = #30000 1'b1;
	Bus_In[2] = #60000 1'b0;
	Bus_In[2] = #30000 1'b1;
	Bus_In[2] = #60000 1'b0;
	Bus_In[2] = #90000 1'b1;
	Bus_In[2] = #90000 1'b0;
end 
// Bus_In[ 1 ]
initial
begin
	Bus_In[1] = 1'b1;
	Bus_In[1] = #60000 1'b0;
	Bus_In[1] = #30000 1'b1;
	Bus_In[1] = #60000 1'b0;
	Bus_In[1] = #90000 1'b1;
	Bus_In[1] = #30000 1'b0;
	Bus_In[1] = #60000 1'b1;
	Bus_In[1] = #30000 1'b0;
	Bus_In[1] = #30000 1'b1;
	Bus_In[1] = #60000 1'b0;
	Bus_In[1] = #270000 1'b1;
	Bus_In[1] = #120000 1'b0;
	Bus_In[1] = #60000 1'b1;
	Bus_In[1] = #30000 1'b0;
	Bus_In[1] = #60000 1'b1;
end 
// Bus_In[ 0 ]
initial
begin
	Bus_In[0] = 1'b1;
	Bus_In[0] = #30000 1'b0;
	Bus_In[0] = #90000 1'b1;
	Bus_In[0] = #30000 1'b0;
	Bus_In[0] = #60000 1'b1;
	Bus_In[0] = #240000 1'b0;
	Bus_In[0] = #30000 1'b1;
	Bus_In[0] = #120000 1'b0;
	Bus_In[0] = #60000 1'b1;
	Bus_In[0] = #150000 1'b0;
	Bus_In[0] = #90000 1'b1;
	Bus_In[0] = #30000 1'b0;
	Bus_In[0] = #30000 1'b1;
	Bus_In[0] = #30000 1'b0;
end 

// Clock
initial
begin
	repeat(12)
	begin
		Clock = 1'b0;
		Clock = #40000 1'b1;
		# 40000;
	end
	Clock = 1'b0;
end 

// Load_NZP_Logic
initial
begin
	Load_NZP_Logic = 1'b0;
	Load_NZP_Logic = #40000 1'b1;
	Load_NZP_Logic = #80000 1'b0;
	Load_NZP_Logic = #80000 1'b1;
	Load_NZP_Logic = #200000 1'b0;
	Load_NZP_Logic = #40000 1'b1;
	Load_NZP_Logic = #80000 1'b0;
	Load_NZP_Logic = #40000 1'b1;
	Load_NZP_Logic = #80000 1'b0;
	Load_NZP_Logic = #80000 1'b1;
	Load_NZP_Logic = #80000 1'b0;
	Load_NZP_Logic = #120000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
end 
endmodule

