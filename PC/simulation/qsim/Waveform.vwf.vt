// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/16/2019 04:23:20"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          PC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module PC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg Load_PC;
reg [15:0] PCMUX_Adder;
reg [15:0] PCMUX_Bus;
reg [1:0] PCMUX_Control;
reg Reset;
// wires                                               
wire [15:0] PC;

// assign statements (if any)                          
PC i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.Load_PC(Load_PC),
	.PC(PC),
	.PCMUX_Adder(PCMUX_Adder),
	.PCMUX_Bus(PCMUX_Bus),
	.PCMUX_Control(PCMUX_Control),
	.Reset(Reset)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
initial
begin
	repeat(16)
	begin
		Clk = 1'b0;
		Clk = #30000 1'b1;
		# 30000;
	end
	Clk = 1'b0;
	Clk = #30000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #570000 1'b1;
	Reset = #40000 1'b0;
end 

// Load_PC
initial
begin
	Load_PC = 1'b1;
end 
// PCMUX_Adder[ 15 ]
initial
begin
	PCMUX_Adder[15] = 1'b0;
end 
// PCMUX_Adder[ 14 ]
initial
begin
	PCMUX_Adder[14] = 1'b0;
end 
// PCMUX_Adder[ 13 ]
initial
begin
	PCMUX_Adder[13] = 1'b0;
end 
// PCMUX_Adder[ 12 ]
initial
begin
	PCMUX_Adder[12] = 1'b0;
end 
// PCMUX_Adder[ 11 ]
initial
begin
	PCMUX_Adder[11] = 1'b0;
end 
// PCMUX_Adder[ 10 ]
initial
begin
	PCMUX_Adder[10] = 1'b0;
end 
// PCMUX_Adder[ 9 ]
initial
begin
	PCMUX_Adder[9] = 1'b0;
end 
// PCMUX_Adder[ 8 ]
initial
begin
	PCMUX_Adder[8] = 1'b0;
end 
// PCMUX_Adder[ 7 ]
initial
begin
	PCMUX_Adder[7] = 1'b0;
end 
// PCMUX_Adder[ 6 ]
initial
begin
	PCMUX_Adder[6] = 1'b0;
end 
// PCMUX_Adder[ 5 ]
initial
begin
	PCMUX_Adder[5] = 1'b0;
end 
// PCMUX_Adder[ 4 ]
initial
begin
	PCMUX_Adder[4] = 1'b0;
end 
// PCMUX_Adder[ 3 ]
initial
begin
	PCMUX_Adder[3] = 1'b0;
end 
// PCMUX_Adder[ 2 ]
initial
begin
	PCMUX_Adder[2] = 1'b0;
end 
// PCMUX_Adder[ 1 ]
initial
begin
	PCMUX_Adder[1] = 1'b0;
end 
// PCMUX_Adder[ 0 ]
initial
begin
	PCMUX_Adder[0] = 1'b0;
end 
// PCMUX_Bus[ 15 ]
initial
begin
	PCMUX_Bus[15] = 1'b0;
end 
// PCMUX_Bus[ 14 ]
initial
begin
	PCMUX_Bus[14] = 1'b0;
end 
// PCMUX_Bus[ 13 ]
initial
begin
	PCMUX_Bus[13] = 1'b0;
end 
// PCMUX_Bus[ 12 ]
initial
begin
	PCMUX_Bus[12] = 1'b0;
end 
// PCMUX_Bus[ 11 ]
initial
begin
	PCMUX_Bus[11] = 1'b0;
end 
// PCMUX_Bus[ 10 ]
initial
begin
	PCMUX_Bus[10] = 1'b0;
end 
// PCMUX_Bus[ 9 ]
initial
begin
	PCMUX_Bus[9] = 1'b0;
end 
// PCMUX_Bus[ 8 ]
initial
begin
	PCMUX_Bus[8] = 1'b0;
end 
// PCMUX_Bus[ 7 ]
initial
begin
	PCMUX_Bus[7] = 1'b0;
end 
// PCMUX_Bus[ 6 ]
initial
begin
	PCMUX_Bus[6] = 1'b0;
end 
// PCMUX_Bus[ 5 ]
initial
begin
	PCMUX_Bus[5] = 1'b0;
end 
// PCMUX_Bus[ 4 ]
initial
begin
	PCMUX_Bus[4] = 1'b0;
end 
// PCMUX_Bus[ 3 ]
initial
begin
	PCMUX_Bus[3] = 1'b0;
end 
// PCMUX_Bus[ 2 ]
initial
begin
	PCMUX_Bus[2] = 1'b0;
end 
// PCMUX_Bus[ 1 ]
initial
begin
	PCMUX_Bus[1] = 1'b0;
end 
// PCMUX_Bus[ 0 ]
initial
begin
	PCMUX_Bus[0] = 1'b0;
end 
// PCMUX_Control[ 1 ]
initial
begin
	PCMUX_Control[1] = 1'b0;
end 
// PCMUX_Control[ 0 ]
initial
begin
	PCMUX_Control[0] = 1'b0;
end 
endmodule

