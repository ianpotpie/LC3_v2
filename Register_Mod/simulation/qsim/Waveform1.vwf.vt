// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/19/2019 01:20:36"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Register_Mod
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Register_Mod_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [15:0] Bus_In;
reg Clk;
reg [2:0] DR_Control;
reg Load_Reg;
reg [2:0] Reg_View_Control;
reg Reset;
reg [2:0] SR1_Control;
reg [2:0] SR2_Control;
// wires                                               
wire [15:0] Reg_View;
wire [15:0] SR1;
wire [15:0] SR2;

// assign statements (if any)                          
Register_Mod i1 (
// port map - connection between master ports and signals/registers   
	.Bus_In(Bus_In),
	.Clk(Clk),
	.DR_Control(DR_Control),
	.Load_Reg(Load_Reg),
	.Reg_View(Reg_View),
	.Reg_View_Control(Reg_View_Control),
	.Reset(Reset),
	.SR1(SR1),
	.SR1_Control(SR1_Control),
	.SR2(SR2),
	.SR2_Control(SR2_Control)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
initial
begin
	repeat(16)
	begin
		Clk = 1'b0;
		Clk = #30000 1'b1;
		# 30000;
	end
	Clk = 1'b0;
	Clk = #30000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #110000 1'b1;
	Reset = #20000 1'b0;
end 

// Load_Reg
initial
begin
	Load_Reg = 1'b1;
end 
// Bus_In[ 15 ]
initial
begin
	Bus_In[15] = 1'b0;
	Bus_In[15] = #80000 1'b1;
	Bus_In[15] = #80000 1'b0;
	Bus_In[15] = #40000 1'b1;
	Bus_In[15] = #40000 1'b0;
	Bus_In[15] = #80000 1'b1;
	Bus_In[15] = #40000 1'b0;
	Bus_In[15] = #120000 1'b1;
	Bus_In[15] = #120000 1'b0;
	Bus_In[15] = #40000 1'b1;
	Bus_In[15] = #40000 1'b0;
	Bus_In[15] = #80000 1'b1;
	Bus_In[15] = #80000 1'b0;
end 
// Bus_In[ 14 ]
initial
begin
	Bus_In[14] = 1'b0;
	Bus_In[14] = #120000 1'b1;
	Bus_In[14] = #120000 1'b0;
	Bus_In[14] = #40000 1'b1;
	Bus_In[14] = #80000 1'b0;
	Bus_In[14] = #80000 1'b1;
	Bus_In[14] = #80000 1'b0;
	Bus_In[14] = #120000 1'b1;
	Bus_In[14] = #40000 1'b0;
	Bus_In[14] = #240000 1'b1;
end 
// Bus_In[ 13 ]
initial
begin
	Bus_In[13] = 1'b0;
	Bus_In[13] = #200000 1'b1;
	Bus_In[13] = #120000 1'b0;
	Bus_In[13] = #40000 1'b1;
	Bus_In[13] = #120000 1'b0;
	Bus_In[13] = #40000 1'b1;
	Bus_In[13] = #120000 1'b0;
	Bus_In[13] = #40000 1'b1;
	Bus_In[13] = #40000 1'b0;
	Bus_In[13] = #40000 1'b1;
	Bus_In[13] = #40000 1'b0;
	Bus_In[13] = #120000 1'b1;
	Bus_In[13] = #40000 1'b0;
end 
// Bus_In[ 12 ]
initial
begin
	Bus_In[12] = 1'b0;
	Bus_In[12] = #80000 1'b1;
	Bus_In[12] = #40000 1'b0;
	Bus_In[12] = #160000 1'b1;
	Bus_In[12] = #40000 1'b0;
	Bus_In[12] = #40000 1'b1;
	Bus_In[12] = #40000 1'b0;
	Bus_In[12] = #40000 1'b1;
	Bus_In[12] = #200000 1'b0;
	Bus_In[12] = #40000 1'b1;
	Bus_In[12] = #80000 1'b0;
	Bus_In[12] = #120000 1'b1;
	Bus_In[12] = #40000 1'b0;
	Bus_In[12] = #40000 1'b1;
end 
// Bus_In[ 11 ]
initial
begin
	Bus_In[11] = 1'b0;
	Bus_In[11] = #80000 1'b1;
	Bus_In[11] = #80000 1'b0;
	Bus_In[11] = #80000 1'b1;
	Bus_In[11] = #120000 1'b0;
	Bus_In[11] = #40000 1'b1;
	Bus_In[11] = #40000 1'b0;
	Bus_In[11] = #80000 1'b1;
	Bus_In[11] = #120000 1'b0;
	Bus_In[11] = #40000 1'b1;
	Bus_In[11] = #40000 1'b0;
	Bus_In[11] = #80000 1'b1;
	Bus_In[11] = #40000 1'b0;
	Bus_In[11] = #80000 1'b1;
end 
// Bus_In[ 10 ]
initial
begin
	Bus_In[10] = 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #80000 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #160000 1'b0;
	Bus_In[10] = #80000 1'b1;
	Bus_In[10] = #40000 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #40000 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #40000 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #80000 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #40000 1'b0;
	Bus_In[10] = #40000 1'b1;
	Bus_In[10] = #80000 1'b0;
end 
// Bus_In[ 9 ]
initial
begin
	Bus_In[9] = 1'b1;
	Bus_In[9] = #240000 1'b0;
	Bus_In[9] = #80000 1'b1;
	Bus_In[9] = #40000 1'b0;
	Bus_In[9] = #40000 1'b1;
	Bus_In[9] = #40000 1'b0;
	Bus_In[9] = #80000 1'b1;
	Bus_In[9] = #120000 1'b0;
	Bus_In[9] = #80000 1'b1;
	Bus_In[9] = #40000 1'b0;
	Bus_In[9] = #120000 1'b1;
end 
// Bus_In[ 8 ]
initial
begin
	Bus_In[8] = 1'b0;
	Bus_In[8] = #40000 1'b1;
	Bus_In[8] = #80000 1'b0;
	Bus_In[8] = #160000 1'b1;
	Bus_In[8] = #120000 1'b0;
	Bus_In[8] = #40000 1'b1;
	Bus_In[8] = #80000 1'b0;
	Bus_In[8] = #80000 1'b1;
	Bus_In[8] = #40000 1'b0;
	Bus_In[8] = #40000 1'b1;
	Bus_In[8] = #40000 1'b0;
	Bus_In[8] = #80000 1'b1;
	Bus_In[8] = #40000 1'b0;
	Bus_In[8] = #40000 1'b1;
	Bus_In[8] = #40000 1'b0;
	Bus_In[8] = #40000 1'b1;
end 
// Bus_In[ 7 ]
initial
begin
	Bus_In[7] = 1'b1;
	Bus_In[7] = #80000 1'b0;
	Bus_In[7] = #280000 1'b1;
	Bus_In[7] = #80000 1'b0;
	Bus_In[7] = #80000 1'b1;
	Bus_In[7] = #160000 1'b0;
	Bus_In[7] = #120000 1'b1;
	Bus_In[7] = #40000 1'b0;
	Bus_In[7] = #120000 1'b1;
end 
// Bus_In[ 6 ]
initial
begin
	Bus_In[6] = 1'b1;
	Bus_In[6] = #80000 1'b0;
	Bus_In[6] = #80000 1'b1;
	Bus_In[6] = #40000 1'b0;
	Bus_In[6] = #80000 1'b1;
	Bus_In[6] = #200000 1'b0;
	Bus_In[6] = #80000 1'b1;
	Bus_In[6] = #200000 1'b0;
	Bus_In[6] = #40000 1'b1;
	Bus_In[6] = #40000 1'b0;
	Bus_In[6] = #80000 1'b1;
end 
// Bus_In[ 5 ]
initial
begin
	Bus_In[5] = 1'b1;
	Bus_In[5] = #120000 1'b0;
	Bus_In[5] = #40000 1'b1;
	Bus_In[5] = #80000 1'b0;
	Bus_In[5] = #120000 1'b1;
	Bus_In[5] = #80000 1'b0;
	Bus_In[5] = #40000 1'b1;
	Bus_In[5] = #120000 1'b0;
	Bus_In[5] = #40000 1'b1;
	Bus_In[5] = #80000 1'b0;
	Bus_In[5] = #40000 1'b1;
	Bus_In[5] = #40000 1'b0;
	Bus_In[5] = #120000 1'b1;
end 
// Bus_In[ 4 ]
initial
begin
	Bus_In[4] = 1'b1;
	Bus_In[4] = #160000 1'b0;
	Bus_In[4] = #40000 1'b1;
	Bus_In[4] = #120000 1'b0;
	Bus_In[4] = #80000 1'b1;
	Bus_In[4] = #120000 1'b0;
	Bus_In[4] = #40000 1'b1;
	Bus_In[4] = #40000 1'b0;
	Bus_In[4] = #40000 1'b1;
	Bus_In[4] = #80000 1'b0;
	Bus_In[4] = #40000 1'b1;
	Bus_In[4] = #40000 1'b0;
	Bus_In[4] = #120000 1'b1;
end 
// Bus_In[ 3 ]
initial
begin
	Bus_In[3] = 1'b0;
	Bus_In[3] = #160000 1'b1;
	Bus_In[3] = #80000 1'b0;
	Bus_In[3] = #120000 1'b1;
	Bus_In[3] = #360000 1'b0;
	Bus_In[3] = #40000 1'b1;
	Bus_In[3] = #40000 1'b0;
end 
// Bus_In[ 2 ]
initial
begin
	Bus_In[2] = 1'b1;
	Bus_In[2] = #80000 1'b0;
	Bus_In[2] = #120000 1'b1;
	Bus_In[2] = #40000 1'b0;
	Bus_In[2] = #80000 1'b1;
	Bus_In[2] = #40000 1'b0;
	Bus_In[2] = #40000 1'b1;
	Bus_In[2] = #40000 1'b0;
	Bus_In[2] = #40000 1'b1;
	Bus_In[2] = #40000 1'b0;
	Bus_In[2] = #80000 1'b1;
	Bus_In[2] = #120000 1'b0;
	Bus_In[2] = #40000 1'b1;
	Bus_In[2] = #80000 1'b0;
	Bus_In[2] = #40000 1'b1;
	Bus_In[2] = #40000 1'b0;
	Bus_In[2] = #40000 1'b1;
end 
// Bus_In[ 1 ]
initial
begin
	Bus_In[1] = 1'b0;
	Bus_In[1] = #120000 1'b1;
	Bus_In[1] = #80000 1'b0;
	Bus_In[1] = #120000 1'b1;
	Bus_In[1] = #80000 1'b0;
	Bus_In[1] = #40000 1'b1;
	Bus_In[1] = #120000 1'b0;
	Bus_In[1] = #120000 1'b1;
	Bus_In[1] = #80000 1'b0;
	Bus_In[1] = #120000 1'b1;
	Bus_In[1] = #40000 1'b0;
end 
// Bus_In[ 0 ]
initial
begin
	Bus_In[0] = 1'b0;
	Bus_In[0] = #40000 1'b1;
	Bus_In[0] = #40000 1'b0;
	Bus_In[0] = #80000 1'b1;
	Bus_In[0] = #40000 1'b0;
	Bus_In[0] = #40000 1'b1;
	Bus_In[0] = #80000 1'b0;
	Bus_In[0] = #80000 1'b1;
	Bus_In[0] = #40000 1'b0;
	Bus_In[0] = #40000 1'b1;
	Bus_In[0] = #40000 1'b0;
	Bus_In[0] = #40000 1'b1;
	Bus_In[0] = #40000 1'b0;
	Bus_In[0] = #120000 1'b1;
	Bus_In[0] = #40000 1'b0;
	Bus_In[0] = #80000 1'b1;
	Bus_In[0] = #80000 1'b0;
	Bus_In[0] = #40000 1'b1;
end 
// DR_Control[ 2 ]
initial
begin
	DR_Control[2] = 1'b0;
	DR_Control[2] = #50000 1'b1;
	DR_Control[2] = #50000 1'b0;
	DR_Control[2] = #50000 1'b1;
	DR_Control[2] = #50000 1'b0;
	DR_Control[2] = #150000 1'b1;
	DR_Control[2] = #100000 1'b0;
	DR_Control[2] = #150000 1'b1;
	DR_Control[2] = #50000 1'b0;
	DR_Control[2] = #50000 1'b1;
	DR_Control[2] = #200000 1'b0;
end 
// DR_Control[ 1 ]
initial
begin
	DR_Control[1] = 1'b0;
	DR_Control[1] = #150000 1'b1;
	DR_Control[1] = #100000 1'b0;
	DR_Control[1] = #50000 1'b1;
	DR_Control[1] = #50000 1'b0;
	DR_Control[1] = #50000 1'b1;
	DR_Control[1] = #50000 1'b0;
	DR_Control[1] = #100000 1'b1;
	DR_Control[1] = #50000 1'b0;
	DR_Control[1] = #350000 1'b1;
end 
// DR_Control[ 0 ]
initial
begin
	DR_Control[0] = 1'b1;
	DR_Control[0] = #250000 1'b0;
	DR_Control[0] = #200000 1'b1;
	DR_Control[0] = #150000 1'b0;
	DR_Control[0] = #150000 1'b1;
	DR_Control[0] = #100000 1'b0;
	DR_Control[0] = #50000 1'b1;
	DR_Control[0] = #50000 1'b0;
end 
// Reg_View_Control[ 2 ]
initial
begin
	repeat(2)
	begin
		Reg_View_Control[2] = 1'b0;
		Reg_View_Control[2] = #200000 1'b1;
		# 200000;
	end
	Reg_View_Control[2] = 1'b0;
end 
// Reg_View_Control[ 1 ]
always
begin
	Reg_View_Control[1] = 1'b0;
	Reg_View_Control[1] = #100000 1'b1;
	#100000;
end 
// Reg_View_Control[ 0 ]
always
begin
	Reg_View_Control[0] = 1'b0;
	Reg_View_Control[0] = #50000 1'b1;
	#50000;
end 
// SR1_Control[ 2 ]
initial
begin
	repeat(2)
	begin
		SR1_Control[2] = 1'b0;
		SR1_Control[2] = #200000 1'b1;
		# 200000;
	end
	SR1_Control[2] = 1'b0;
end 
// SR1_Control[ 1 ]
always
begin
	SR1_Control[1] = 1'b0;
	SR1_Control[1] = #100000 1'b1;
	#100000;
end 
// SR1_Control[ 0 ]
always
begin
	SR1_Control[0] = 1'b0;
	SR1_Control[0] = #50000 1'b1;
	#50000;
end 
// SR2_Control[ 2 ]
initial
begin
	repeat(2)
	begin
		SR2_Control[2] = 1'b0;
		SR2_Control[2] = #200000 1'b1;
		# 200000;
	end
	SR2_Control[2] = 1'b0;
end 
// SR2_Control[ 1 ]
always
begin
	SR2_Control[1] = 1'b0;
	SR2_Control[1] = #100000 1'b1;
	#100000;
end 
// SR2_Control[ 0 ]
always
begin
	SR2_Control[0] = 1'b0;
	SR2_Control[0] = #50000 1'b1;
	#50000;
end 
endmodule

