// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "03/15/2019 19:23:40"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          Negedge_DSwitch_16Reg
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Negedge_DSwitch_16Reg_vlg_vec_tst();
// constants                                           
// general purpose registers
reg Clk;
reg [15:0] D;
reg Reset;
reg WE;
// wires                                               
wire [15:0] Q;

// assign statements (if any)                          
Negedge_DSwitch_16Reg i1 (
// port map - connection between master ports and signals/registers   
	.Clk(Clk),
	.D(D),
	.Q(Q),
	.Reset(Reset),
	.WE(WE)
);
initial 
begin 
#1000000 $finish;
end 

// Clk
initial
begin
	repeat(16)
	begin
		Clk = 1'b0;
		Clk = #30000 1'b1;
		# 30000;
	end
	Clk = 1'b0;
	Clk = #30000 1'b1;
end 

// Reset
initial
begin
	Reset = 1'b0;
	Reset = #20000 1'b1;
	Reset = #20000 1'b0;
end 
// D[ 15 ]
initial
begin
	D[15] = 1'b0;
end 
// D[ 14 ]
initial
begin
	D[14] = 1'b0;
end 
// D[ 13 ]
initial
begin
	D[13] = 1'b0;
end 
// D[ 12 ]
initial
begin
	D[12] = 1'b0;
end 
// D[ 11 ]
initial
begin
	D[11] = 1'b0;
end 
// D[ 10 ]
initial
begin
	D[10] = 1'b0;
end 
// D[ 9 ]
initial
begin
	D[9] = 1'b0;
end 
// D[ 8 ]
initial
begin
	D[8] = 1'b0;
end 
// D[ 7 ]
initial
begin
	D[7] = 1'b0;
end 
// D[ 6 ]
initial
begin
	D[6] = 1'b0;
end 
// D[ 5 ]
initial
begin
	D[5] = 1'b0;
end 
// D[ 4 ]
initial
begin
	D[4] = 1'b0;
	D[4] = #580000 1'b1;
	D[4] = #150000 1'b0;
end 
// D[ 3 ]
initial
begin
	D[3] = 1'b0;
	D[3] = #340000 1'b1;
	D[3] = #240000 1'b0;
end 
// D[ 2 ]
initial
begin
	D[2] = 1'b0;
	D[2] = #220000 1'b1;
	D[2] = #120000 1'b0;
	D[2] = #120000 1'b1;
	D[2] = #120000 1'b0;
	D[2] = #120000 1'b1;
	D[2] = #30000 1'b0;
end 
// D[ 1 ]
initial
begin
	D[1] = 1'b0;
	D[1] = #160000 1'b1;
	# 60000;
	repeat(4)
	begin
		D[1] = 1'b0;
		D[1] = #60000 1'b1;
		# 60000;
	end
	D[1] = 1'b0;
end 
// D[ 0 ]
initial
begin
	D[0] = 1'b0;
	D[0] = #130000 1'b1;
	# 30000;
	repeat(9)
	begin
		D[0] = 1'b0;
		D[0] = #30000 1'b1;
		# 30000;
	end
	D[0] = 1'b0;
end 

// WE
initial
begin
	WE = 1'b0;
	WE = #20000 1'b1;
	WE = #60000 1'b0;
	WE = #80000 1'b1;
	WE = #140000 1'b0;
	WE = #60000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #40000 1'b0;
	WE = #40000 1'b1;
	WE = #40000 1'b0;
	WE = #40000 1'b1;
	WE = #20000 1'b0;
	WE = #60000 1'b1;
	WE = #40000 1'b0;
	WE = #40000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
	WE = #60000 1'b1;
	WE = #20000 1'b0;
	WE = #20000 1'b1;
	WE = #60000 1'b0;
	WE = #20000 1'b1;
	WE = #20000 1'b0;
end 
endmodule

